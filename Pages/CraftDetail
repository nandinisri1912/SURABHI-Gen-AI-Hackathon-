import React, { useState, useEffect } from "react";
import { Craft, Artisan, User } from "@/entities/Craft";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { 
  MapPin, 
  Clock, 
  Star, 
  ShoppingCart, 
  Heart, 
  Share, 
  Award,
  Palette,
  ArrowLeft,
  Eye,
  Plus
} from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { useLanguage } from "../components/LanguageProvider";

export default function CraftDetail() {
  const [craft, setCraft] = useState(null);
  const [artisan, setArtisan] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedImage, setSelectedImage] = useState(0);
  const [cart, setCart] = useState([]);
  const { t } = useLanguage();

  useEffect(() => {
    loadData();
    loadCart();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // Get craft ID from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const craftId = urlParams.get('id');
      
      if (!craftId) {
        console.error("No craft ID provided");
        return;
      }

      // Try to get current user
      try {
        const user = await User.me();
        setCurrentUser(user);
      } catch (error) {
        setCurrentUser(null);
      }
      
      // Load craft details
      const crafts = await Craft.list();
      const foundCraft = crafts.find(c => c.id === craftId);
      
      if (foundCraft) {
        setCraft(foundCraft);
        
        // Load artisan details
        const artisans = await Artisan.list();
        const foundArtisan = artisans.find(a => a.id === foundCraft.artisan_id);
        setArtisan(foundArtisan);
      }
      
    } catch (error) {
      console.error("Error loading craft details:", error);
    }
    setIsLoading(false);
  };

  const loadCart = () => {
    const savedCart = localStorage.getItem('surabhi_cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  };

  const addToCart = (craft) => {
    const newCart = [...cart, { ...craft, quantity: 1, addedAt: new Date() }];
    setCart(newCart);
    localStorage.setItem('surabhi_cart', JSON.stringify(newCart));
  };

  const handleLogin = async () => {
    try {
      await User.loginWithRedirect(window.location.href);
    } catch (error) {
      console.error("Login error:", error);
    }
  };

  if (isLoading) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-6xl mx-auto space-y-6">
          <div className="bg-white/50 rounded-2xl p-8 animate-pulse">
            <div className="h-8 bg-orange-200 rounded-lg w-1/2 mb-6"></div>
            <div className="grid lg:grid-cols-2 gap-8">
              <div className="aspect-square bg-orange-100 rounded-lg"></div>
              <div className="space-y-4">
                <div className="h-6 bg-orange-200 rounded-lg w-3/4"></div>
                <div className="h-4 bg-orange-100 rounded-lg w-full"></div>
                <div className="h-4 bg-orange-100 rounded-lg w-2/3"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!craft) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-4xl mx-auto text-center">
          <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-12 shadow-lg border border-orange-100">
            <Palette className="w-20 h-20 text-orange-400 mx-auto mb-6" />
            <h1 className="text-3xl font-bold text-gray-800 mb-4">Craft Not Found</h1>
            <p className="text-lg text-gray-600 mb-8">
              The craft you're looking for doesn't exist or has been removed.
            </p>
            <Link to={createPageUrl("Explorer")}>
              <Button className="bg-gradient-to-r from-orange-500 to-indigo-500 text-white px-8 py-3 text-lg rounded-xl">
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Explorer
              </Button>
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-orange-50 to-yellow-50">
      <div className="p-6 lg:p-8">
        <div className="max-w-7xl mx-auto">
          {/* Back Button */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6"
          >
            <Link to={createPageUrl("Explorer")}>
              <Button variant="outline" className="border-orange-300 hover:bg-orange-50">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Explorer
              </Button>
            </Link>
          </motion.div>

          <div className="grid lg:grid-cols-2 gap-12">
            {/* Image Gallery */}
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              animate={{ opacity: 1, x: 0 }}
              className="space-y-4"
            >
              <Card className="bg-white/80 backdrop-blur-sm border-orange-100 overflow-hidden">
                <div className="aspect-square">
                  {craft.images && craft.images[selectedImage] ? (
                    <img 
                      src={craft.images[selectedImage]} 
                      alt={craft.title}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full bg-gradient-to-br from-orange-100 to-pink-100 flex items-center justify-center">
                      <Palette className="w-24 h-24 text-orange-300" />
                    </div>
                  )}
                </div>
              </Card>

              {/* Thumbnail Gallery */}
              {craft.images && craft.images.length > 1 && (
                <div className="flex gap-3 overflow-x-auto">
                  {craft.images.map((image, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedImage(index)}
                      className={`flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all ${
                        selectedImage === index ? 'border-orange-400' : 'border-gray-200'
                      }`}
                    >
                      <img src={image} alt={`${craft.title} ${index + 1}`} className="w-full h-full object-cover" />
                    </button>
                  ))}
                </div>
              )}
            </motion.div>

            {/* Product Details */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              className="space-y-6"
            >
              <div>
                <h1 className="text-4xl font-bold text-gray-800 mb-4">{craft.title}</h1>
                <div className="flex flex-wrap gap-3 mb-6">
                  <Badge className="bg-orange-100 text-orange-700 px-3 py-1">
                    {craft.craft_type.replace(/_/g, ' ')}
                  </Badge>
                  {craft.region_style && (
                    <Badge variant="outline" className="border-indigo-200 text-indigo-700">
                      <MapPin className="w-3 h-3 mr-1" />
                      {craft.region_style}
                    </Badge>
                  )}
                  {craft.time_to_create && (
                    <Badge variant="outline" className="border-emerald-200 text-emerald-700">
                      <Clock className="w-3 h-3 mr-1" />
                      {craft.time_to_create}
                    </Badge>
                  )}
                </div>
                <div className="text-4xl font-bold text-gray-800 mb-6">
                  â‚¹{craft.price?.toLocaleString('en-IN')}
                </div>
              </div>

              <Card className="bg-white/80 backdrop-blur-sm border-orange-100">
                <CardContent className="p-6">
                  <h3 className="text-xl font-bold text-gray-800 mb-3">Description</h3>
                  <p className="text-gray-700 leading-relaxed mb-4">
                    {craft.description}
                  </p>
                  
                  {craft.cultural_significance && (
                    <div className="mt-4 p-4 bg-gradient-to-r from-pink-50 to-orange-50 rounded-lg border border-pink-200">
                      <h4 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                        <Award className="w-4 h-4 text-pink-600" />
                        Cultural Significance
                      </h4>
                      <p className="text-gray-700 text-sm italic">
                        "{craft.cultural_significance}"
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Action Buttons */}
              <div className="space-y-4">
                {currentUser ? (
                  <div className="flex gap-4">
                    <Button 
                      onClick={() => addToCart(craft)}
                      className="flex-1 bg-gradient-to-r from-pink-500 via-orange-500 to-yellow-500 hover:from-pink-600 hover:via-orange-600 hover:to-yellow-600 text-white py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      <ShoppingCart className="w-5 h-5 mr-2" />
                      Add to Cart
                    </Button>
                    <Button variant="outline" className="border-pink-300 hover:bg-pink-50">
                      <Heart className="w-5 h-5" />
                    </Button>
                    <Button variant="outline" className="border-pink-300 hover:bg-pink-50">
                      <Share className="w-5 h-5" />
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <Button 
                      onClick={handleLogin}
                      className="w-full bg-gradient-to-r from-pink-500 via-orange-500 to-yellow-500 hover:from-pink-600 hover:via-orange-600 hover:to-yellow-600 text-white py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      Login to Purchase
                    </Button>
                    <p className="text-center text-sm text-gray-600">
                      Create an account to add items to cart and make purchases
                    </p>
                  </div>
                )}
              </div>

              {/* Craft Details */}
              <Card className="bg-white/80 backdrop-blur-sm border-orange-100">
                <CardContent className="p-6 space-y-4">
                  <h3 className="text-xl font-bold text-gray-800">Craft Details</h3>
                  
                  {craft.materials_used && (
                    <div>
                      <h4 className="font-semibold text-gray-800 mb-2">Materials & Techniques:</h4>
                      <p className="text-gray-700 text-sm">{craft.materials_used}</p>
                    </div>
                  )}
                  
                  {craft.dimensions && (
                    <div>
                      <h4 className="font-semibold text-gray-800 mb-2">Dimensions:</h4>
                      <p className="text-gray-700 text-sm">{craft.dimensions}</p>
                    </div>
                  )}
                  
                  <div className="flex items-center gap-4 pt-4 border-t border-orange-100">
                    <Badge variant={craft.is_available ? "default" : "secondary"}>
                      {craft.is_available ? "Available" : "Sold Out"}
                    </Badge>
                    {craft.is_custom_order && (
                      <Badge variant="outline" className="border-indigo-200 text-indigo-700">
                        Made to Order
                      </Badge>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Artisan Info */}
              {artisan && (
                <Card className="bg-white/80 backdrop-blur-sm border-orange-100">
                  <CardContent className="p-6">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">Meet the Artisan</h3>
                    <div className="flex items-start gap-4">
                      {artisan.profile_image ? (
                        <img 
                          src={artisan.profile_image} 
                          alt={artisan.name}
                          className="w-16 h-16 rounded-full object-cover border-2 border-orange-200"
                        />
                      ) : (
                        <div className="w-16 h-16 bg-gradient-to-r from-pink-400 via-orange-400 to-yellow-500 rounded-full flex items-center justify-center text-white text-xl font-bold">
                          {artisan.name.charAt(0)}
                        </div>
                      )}
                      <div className="flex-1">
                        <h4 className="font-bold text-gray-800 text-lg">{artisan.name}</h4>
                        <div className="flex items-center gap-2 mb-2">
                          <Badge variant="outline" className="border-orange-200 text-orange-700">
                            <Award className="w-3 h-3 mr-1" />
                            {artisan.craft_tradition.replace(/_/g, ' ')}
                          </Badge>
                          <Badge variant="outline" className="border-indigo-200 text-indigo-700">
                            <MapPin className="w-3 h-3 mr-1" />
                            {artisan.location}
                          </Badge>
                        </div>
                        <p className="text-gray-700 text-sm line-clamp-3">
                          {artisan.story}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
}