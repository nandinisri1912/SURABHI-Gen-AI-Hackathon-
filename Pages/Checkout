import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { 
  CreditCard, 
  MapPin, 
  Phone, 
  Mail, 
  ShoppingCart, 
  ArrowLeft,
  Shield,
  Check
} from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function Checkout() {
  const [cart, setCart] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isProcessing, setIsProcessing] = useState(false);
  const [shippingInfo, setShippingInfo] = useState({
    fullName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    state: '',
    pincode: '',
    notes: ''
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // Check authentication
      const user = await User.me();
      setCurrentUser(user);
      
      // Pre-fill user info
      setShippingInfo(prev => ({
        ...prev,
        fullName: user.full_name || '',
        email: user.email || ''
      }));
      
      // Load cart from localStorage
      const savedCart = localStorage.getItem('surabhi_cart');
      if (savedCart) {
        const cartItems = JSON.parse(savedCart);
        if (cartItems.length === 0) {
          // Redirect to cart if empty
          window.location.href = '/Cart';
          return;
        }
        setCart(cartItems);
      } else {
        window.location.href = '/Cart';
        return;
      }
    } catch (error) {
      // User not logged in, redirect to login
      await User.loginWithRedirect(window.location.origin + '/Checkout');
    }
    setIsLoading(false);
  };

  const handleInputChange = (field, value) => {
    setShippingInfo(prev => ({ ...prev, [field]: value }));
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const handlePlaceOrder = async (e) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // Simulate order processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Clear cart
      localStorage.removeItem('surabhi_cart');
      
      // Redirect to success page
      window.location.href = '/OrderSuccess';
    } catch (error) {
      console.error("Error placing order:", error);
      setIsProcessing(false);
    }
  };

  if (isLoading) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-6xl mx-auto space-y-6">
          <div className="bg-white/50 rounded-2xl p-6 animate-pulse">
            <div className="h-6 bg-orange-200 rounded-lg w-1/3 mb-4"></div>
            <div className="h-4 bg-orange-100 rounded-lg w-2/3"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-orange-50 to-yellow-50">
      <div className="p-6 lg:p-8">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex items-center gap-4 mb-8"
          >
            <Link to={createPageUrl("Cart")}>
              <Button variant="outline" className="border-orange-300 hover:bg-orange-50">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Cart
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-800">Secure Checkout</h1>
              <p className="text-gray-600">Complete your order safely and securely</p>
            </div>
          </motion.div>

          <form onSubmit={handlePlaceOrder}>
            <div className="grid lg:grid-cols-3 gap-8">
              {/* Shipping Information */}
              <div className="lg:col-span-2 space-y-6">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                >
                  <Card className="bg-white/90 backdrop-blur-sm border-orange-100">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <MapPin className="w-5 h-5 text-orange-500" />
                        Shipping Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="fullName">Full Name *</Label>
                          <Input
                            id="fullName"
                            value={shippingInfo.fullName}
                            onChange={(e) => handleInputChange('fullName', e.target.value)}
                            required
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="email">Email Address *</Label>
                          <Input
                            id="email"
                            type="email"
                            value={shippingInfo.email}
                            onChange={(e) => handleInputChange('email', e.target.value)}
                            required
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div>
                        <Label htmlFor="phone">Phone Number *</Label>
                        <Input
                          id="phone"
                          value={shippingInfo.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          placeholder="+91 98765 43210"
                          required
                          className="mt-2"
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="address">Address *</Label>
                        <Textarea
                          id="address"
                          value={shippingInfo.address}
                          onChange={(e) => handleInputChange('address', e.target.value)}
                          placeholder="Street address, apartment, suite, etc."
                          required
                          className="mt-2"
                        />
                      </div>
                      
                      <div className="grid md:grid-cols-3 gap-4">
                        <div>
                          <Label htmlFor="city">City *</Label>
                          <Input
                            id="city"
                            value={shippingInfo.city}
                            onChange={(e) => handleInputChange('city', e.target.value)}
                            required
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="state">State *</Label>
                          <Input
                            id="state"
                            value={shippingInfo.state}
                            onChange={(e) => handleInputChange('state', e.target.value)}
                            required
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="pincode">PIN Code *</Label>
                          <Input
                            id="pincode"
                            value={shippingInfo.pincode}
                            onChange={(e) => handleInputChange('pincode', e.target.value)}
                            placeholder="110001"
                            required
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div>
                        <Label htmlFor="notes">Order Notes (Optional)</Label>
                        <Textarea
                          id="notes"
                          value={shippingInfo.notes}
                          onChange={(e) => handleInputChange('notes', e.target.value)}
                          placeholder="Any special instructions for your order..."
                          className="mt-2"
                        />
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  <Card className="bg-white/90 backdrop-blur-sm border-orange-100">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <CreditCard className="w-5 h-5 text-orange-500" />
                        Payment Method
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-lg border border-green-200">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                            <Shield className="w-5 h-5 text-green-600" />
                          </div>
                          <div>
                            <h4 className="font-semibold text-gray-800">Cash on Delivery (COD)</h4>
                            <p className="text-sm text-gray-600">Pay when your order arrives</p>
                          </div>
                        </div>
                        <div className="space-y-2 text-sm text-gray-700">
                          <div className="flex items-center gap-2">
                            <Check className="w-4 h-4 text-green-600" />
                            <span>No online payment required</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Check className="w-4 h-4 text-green-600" />
                            <span>Inspect your items before payment</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Check className="w-4 h-4 text-green-600" />
                            <span>Secure and convenient</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>

              {/* Order Summary */}
              <div className="lg:col-span-1">
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="sticky top-8 space-y-6"
                >
                  <Card className="bg-white/90 backdrop-blur-sm border-orange-100 shadow-xl">
                    <CardHeader>
                      <CardTitle>Order Summary</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      {cart.map((item) => (
                        <div key={item.id} className="flex gap-3 pb-3 border-b border-orange-100 last:border-b-0">
                          <div className="w-12 h-12 bg-gradient-to-br from-orange-100 to-pink-100 rounded-lg flex items-center justify-center flex-shrink-0">
                            {item.images && item.images[0] ? (
                              <img src={item.images[0]} alt={item.title} className="w-12 h-12 object-cover rounded-lg" />
                            ) : (
                              <ShoppingCart className="w-5 h-5 text-orange-400" />
                            )}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-semibold text-gray-800 text-sm line-clamp-2">{item.title}</h4>
                            <div className="flex items-center justify-between mt-1">
                              <span className="text-sm text-gray-600">Qty: {item.quantity}</span>
                              <span className="font-semibold text-gray-800">
                                ₹{(item.price * item.quantity).toLocaleString('en-IN')}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                      
                      <div className="space-y-2 pt-4 border-t border-orange-100">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Subtotal</span>
                          <span className="font-semibold">₹{calculateTotal().toLocaleString('en-IN')}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Shipping</span>
                          <span className="text-green-600 font-semibold">Free</span>
                        </div>
                        <div className="flex justify-between items-center pt-2 border-t border-orange-100">
                          <span className="text-lg font-bold text-gray-800">Total</span>
                          <span className="text-2xl font-bold text-gray-800">
                            ₹{calculateTotal().toLocaleString('en-IN')}
                          </span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Button
                    type="submit"
                    disabled={isProcessing}
                    className="w-full bg-gradient-to-r from-pink-500 via-orange-500 to-yellow-500 hover:from-pink-600 hover:via-orange-600 hover:to-yellow-600 text-white py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    {isProcessing ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                        Processing Order...
                      </>
                    ) : (
                      <>
                        <CreditCard className="w-5 h-5 mr-2" />
                        Place Order
                      </>
                    )}
                  </Button>
                </motion.div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}