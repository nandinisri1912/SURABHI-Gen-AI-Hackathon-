import React, { useState, useEffect } from "react";
import { Artisan, User } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { Save, Camera, MapPin, Heart, Clock, Award } from "lucide-react";
import { UploadFile } from "@/integrations/Core";

export default function Profile() {
  const [artisan, setArtisan] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    craft_tradition: "",
    location: "",
    story: "",
    experience_years: "",
    speciality: "",
    profile_image: "",
    workshop_image: "",
    phone: "",
    languages: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isUploading, setIsUploading] = useState({ profile: false, workshop: false });

  const craftTraditions = [
    { value: "pottery", label: "Pottery & Ceramics" },
    { value: "textile_weaving", label: "Textile Weaving" },
    { value: "jewelry_making", label: "Jewelry Making" },
    { value: "wood_carving", label: "Wood Carving" },
    { value: "metal_work", label: "Metal Work" },
    { value: "painting", label: "Traditional Painting" },
    { value: "embroidery", label: "Embroidery" },
    { value: "basket_weaving", label: "Basket Weaving" },
    { value: "leather_work", label: "Leather Work" },
    { value: "stone_carving", label: "Stone Carving" },
    { value: "glass_blowing", label: "Glass Blowing" },
    { value: "other", label: "Other" }
  ];

  useEffect(() => {
    loadProfile();
  }, []);

  const loadProfile = async () => {
    setIsLoading(true);
    try {
      const user = await User.me();
      setCurrentUser(user);
      
      const artisanProfiles = await Artisan.filter({ created_by: user.email });
      if (artisanProfiles.length > 0) {
        const profile = artisanProfiles[0];
        setArtisan(profile);
        setFormData({
          name: profile.name || "",
          craft_tradition: profile.craft_tradition || "",
          location: profile.location || "",
          story: profile.story || "",
          experience_years: profile.experience_years || "",
          speciality: profile.speciality || "",
          profile_image: profile.profile_image || "",
          workshop_image: profile.workshop_image || "",
          phone: profile.phone || "",
          languages: profile.languages || []
        });
      } else {
        // Set default name from user
        setFormData(prev => ({ ...prev, name: user.full_name || "" }));
      }
    } catch (error) {
      console.error("Error loading profile:", error);
    }
    setIsLoading(false);
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = async (file, type) => {
    setIsUploading(prev => ({ ...prev, [type]: true }));
    try {
      const result = await UploadFile({ file });
      handleInputChange(type === "profile" ? "profile_image" : "workshop_image", result.file_url);
    } catch (error) {
      console.error("Error uploading image:", error);
    }
    setIsUploading(prev => ({ ...prev, [type]: false }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);
    
    try {
      if (artisan) {
        await Artisan.update(artisan.id, formData);
      } else {
        await Artisan.create(formData);
      }
      window.location.reload();
    } catch (error) {
      console.error("Error saving profile:", error);
    }
    setIsSaving(false);
  };

  if (isLoading) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-4xl mx-auto space-y-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white/50 rounded-2xl p-6 animate-pulse">
              <div className="h-6 bg-orange-200 rounded-lg w-1/3 mb-4"></div>
              <div className="h-4 bg-orange-100 rounded-lg w-2/3"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 lg:p-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            {artisan ? "My Artisan Profile" : "Create Your Artisan Profile"}
          </h1>
          <p className="text-gray-600">
            {artisan ? "Update your profile to better connect with art lovers" : "Tell the world about your craft heritage and artistic journey"}
          </p>
        </motion.div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Personal Information */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
          >
            <Card className="bg-white/80 backdrop-blur-sm border-orange-100">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Heart className="w-5 h-5 text-orange-500" />
                  Personal Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="name">Your Name</Label>
                    <Input
                      id="name"
                      value={formData.name}
                      onChange={(e) => handleInputChange("name", e.target.value)}
                      placeholder="Enter your full name"
                      className="mt-2"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">Phone Number</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => handleInputChange("phone", e.target.value)}
                      placeholder="+91 98765 43210"
                      className="mt-2"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => handleInputChange("location", e.target.value)}
                    placeholder="City, State (e.g., Jaipur, Rajasthan)"
                    className="mt-2"
                    required
                  />
                </div>

                {/* Profile Images */}
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <Label>Profile Photo</Label>
                    <div className="mt-2 flex items-center gap-4">
                      {formData.profile_image ? (
                        <img 
                          src={formData.profile_image} 
                          alt="Profile"
                          className="w-16 h-16 rounded-full object-cover border-4 border-orange-200"
                        />
                      ) : (
                        <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center">
                          <Camera className="w-6 h-6 text-orange-500" />
                        </div>
                      )}
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => e.target.files[0] && handleImageUpload(e.target.files[0], "profile")}
                        className="hidden"
                        id="profile-upload"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => document.getElementById("profile-upload").click()}
                        disabled={isUploading.profile}
                        className="border-orange-300 hover:bg-orange-50"
                      >
                        {isUploading.profile ? "Uploading..." : "Upload Photo"}
                      </Button>
                    </div>
                  </div>

                  <div>
                    <Label>Workshop Photo</Label>
                    <div className="mt-2 flex items-center gap-4">
                      {formData.workshop_image ? (
                        <img 
                          src={formData.workshop_image} 
                          alt="Workshop"
                          className="w-16 h-16 rounded-lg object-cover border-2 border-orange-200"
                        />
                      ) : (
                        <div className="w-16 h-16 bg-orange-100 rounded-lg flex items-center justify-center">
                          <Camera className="w-6 h-6 text-orange-500" />
                        </div>
                      )}
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => e.target.files[0] && handleImageUpload(e.target.files[0], "workshop")}
                        className="hidden"
                        id="workshop-upload"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => document.getElementById("workshop-upload").click()}
                        disabled={isUploading.workshop}
                        className="border-orange-300 hover:bg-orange-50"
                      >
                        {isUploading.workshop ? "Uploading..." : "Upload Photo"}
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Craft Information */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <Card className="bg-white/80 backdrop-blur-sm border-orange-100">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="w-5 h-5 text-indigo-500" />
                  Craft Heritage
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="craft_tradition">Primary Craft Tradition</Label>
                    <Select value={formData.craft_tradition} onValueChange={(value) => handleInputChange("craft_tradition", value)}>
                      <SelectTrigger className="mt-2">
                        <SelectValue placeholder="Select your craft tradition" />
                      </SelectTrigger>
                      <SelectContent>
                        {craftTraditions.map((craft) => (
                          <SelectItem key={craft.value} value={craft.value}>
                            {craft.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="experience_years">Years of Experience</Label>
                    <Input
                      id="experience_years"
                      type="number"
                      value={formData.experience_years}
                      onChange={(e) => handleInputChange("experience_years", parseInt(e.target.value) || "")}
                      placeholder="15"
                      className="mt-2"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="speciality">Your Speciality</Label>
                  <Input
                    id="speciality"
                    value={formData.speciality}
                    onChange={(e) => handleInputChange("speciality", e.target.value)}
                    placeholder="What makes your craft unique? (e.g., Blue pottery with floral motifs)"
                    className="mt-2"
                  />
                </div>

                <div>
                  <Label htmlFor="story">Your Story & Heritage</Label>
                  <Textarea
                    id="story"
                    value={formData.story}
                    onChange={(e) => handleInputChange("story", e.target.value)}
                    placeholder="Tell the world about your craft journey, family traditions, and what inspires your work..."
                    className="mt-2 min-h-32"
                    required
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Share your heritage, inspiration, and the story behind your craft. This helps customers connect with your work.
                  </p>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Save Button */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="flex justify-end"
          >
            <Button
              type="submit"
              disabled={isSaving}
              className="bg-gradient-to-r from-orange-500 to-indigo-500 hover:from-orange-600 hover:to-indigo-600 text-white px-8 py-3 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
            >
              {isSaving ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="w-5 h-5 mr-2" />
                  {artisan ? "Update Profile" : "Create Profile"}
                </>
              )}
            </Button>
          </motion.div>
        </form>
      </div>
    </div>
  );
}